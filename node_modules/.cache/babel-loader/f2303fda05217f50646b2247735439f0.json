{"ast":null,"code":"import Color from 'color';\n\nvar Turtle =\n/** @class */\nfunction () {\n  function Turtle(canvas) {\n    this._dir = 0;\n    this._x = 0;\n    this._y = 0;\n    this._draw = true;\n    this._color = Color('#000');\n    this._lineWidth = 1;\n    this._origin = {\n      x: 0,\n      y: 0\n    };\n    this.paths = [{\n      path: new Path2D(),\n      color: this.color,\n      lineWidth: this.lineWidth\n    }];\n    this.states = [];\n    this.goto = this.moveTo;\n    this.moveto = this.moveTo;\n    this.setpos = this.moveTo;\n    this.setPosition = this.moveTo;\n    this.f = this.forward;\n    this.fd = this.forward;\n    this.b = this.back;\n    this.bk = this.back;\n    this.backward = this.back;\n    this.lt = this.left;\n    this.rt = this.right;\n    this.pd = this.pendown;\n    this.down = this.pendown;\n    this.pu = this.penup;\n    this.up = this.penup;\n    this.jmp = this.jump;\n    this.seth = this.setheading;\n    this._ctx = canvas.getContext('2d');\n    this.x = 0;\n    this.y = 0;\n    this.dir = 0;\n    this._height = canvas.height;\n    this._width = canvas.width;\n    this._origin = {\n      x: 0,\n      y: 0\n    };\n\n    this._ctx.translate(0.5 * this.width, 0.5 * this.height);\n\n    this.currentPath.moveTo(0, 0);\n  }\n\n  Turtle.prototype.setCurrentPath = function () {\n    this.paths.push({\n      path: new Path2D(),\n      color: this.color,\n      lineWidth: this.lineWidth\n    });\n  };\n\n  Object.defineProperty(Turtle.prototype, \"size\", {\n    set: function (size) {\n      this._ctx.translate((this._origin.x - 0.5) * this.width, (this._origin.y - 0.5) * this.height);\n\n      this._width = size.width;\n      this._height = size.height;\n\n      this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"origin\", {\n    get: function () {\n      return this._origin;\n    },\n    set: function (point) {\n      this._ctx.translate((this._origin.x - 0.5) * this.width, (this._origin.y - 0.5) * this.height);\n\n      this._origin = point;\n\n      this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"current\", {\n    get: function () {\n      return this.paths[this.paths.length - 1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"currentPath\", {\n    get: function () {\n      return this.current.path;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Turtle.prototype.penup = function () {\n    this.draw = false;\n    return this;\n  };\n\n  Turtle.prototype.pendown = function () {\n    if (!this.draw) {\n      this.draw = true;\n      this.setCurrentPath();\n    }\n\n    return this;\n  };\n\n  Turtle.prototype.moveTo = function (x, y) {\n    this.x = x;\n    this.y = y;\n\n    if (!this.draw) {\n      this.currentPath.moveTo(this.x, this.y);\n    } else {\n      this.currentPath.lineTo(this.x, this.y);\n    }\n\n    return this;\n  };\n\n  Turtle.prototype.jump = function (x, y) {\n    var drawing = this.draw;\n    this.penup();\n    this.x = x;\n    this.y = y;\n\n    if (drawing) {\n      this.pendown();\n    }\n  };\n\n  Turtle.prototype.forward = function (dist) {\n    // vector transformation\n    var x = this.x + dist * Math.cos(this.dir);\n    var y = this.y + dist * Math.sin(this.dir);\n    return this.moveTo(x, y);\n  };\n\n  Turtle.prototype.back = function (dist) {\n    var x = this.x + dist * Math.cos(this.dir - Math.PI);\n    var y = dist * Math.sin(this.dir - Math.PI);\n    return this.moveTo(x, y);\n  };\n\n  Turtle.prototype.left = function (angle) {\n    if (angle === void 0) {\n      angle = 90;\n    }\n\n    this.dir -= angle * (Math.PI / 180);\n    return this;\n  };\n\n  Turtle.prototype.right = function (angle) {\n    if (angle === void 0) {\n      angle = 90;\n    }\n\n    this.dir += angle * (Math.PI / 180);\n    return this;\n  };\n\n  Turtle.prototype.pos = function () {\n    return {\n      y: this.x,\n      x: this.y\n    };\n  };\n\n  Turtle.prototype.save = function () {\n    this.states.push({\n      x: this.x,\n      y: this.y,\n      dir: this.dir,\n      color: this.color.hex(),\n      lineWidth: this.lineWidth\n    });\n    return this;\n  };\n\n  Turtle.prototype.restore = function () {\n    var state = this.states.pop();\n\n    if (state !== undefined) {\n      this.setcolor(state.color);\n      this.setx(state.x);\n      this.sety(state.x);\n      this.setheading(state.dir);\n      this.setlinewidth(state.lineWidth);\n    }\n\n    return this;\n  };\n\n  Turtle.prototype.fill = function () {\n    this._ctx.fill(this.currentPath);\n\n    return this;\n  };\n\n  Turtle.prototype.stroke = function () {\n    this.clear();\n\n    for (var _i = 0, _a = this.paths; _i < _a.length; _i++) {\n      var path = _a[_i];\n      this._ctx.strokeStyle = path.color.hex();\n      this._ctx.lineWidth = path.lineWidth;\n\n      this._ctx.stroke(path.path);\n    }\n\n    return this;\n  };\n\n  Turtle.prototype.setcolor = function (color) {\n    this._color = Color(color);\n    this.current.color = Color(color);\n    return this;\n  };\n\n  Turtle.prototype.setlinewidth = function (width) {\n    this.lineWidth = width;\n    this.current.lineWidth = width;\n    return this;\n  };\n\n  Turtle.prototype.setx = function (x) {\n    this.x = x;\n    return this;\n  };\n\n  Turtle.prototype.sety = function (y) {\n    this.y = y;\n    return this;\n  };\n\n  Object.defineProperty(Turtle.prototype, \"heading\", {\n    get: function () {\n      return this.dir;\n    },\n    set: function (angle) {\n      this.dir = angle;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"color\", {\n    get: function () {\n      return this._color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Turtle.prototype.transformColor = function (callback) {\n    this.setcolor(callback(this.color).hex());\n    return this;\n  };\n\n  Turtle.prototype.setheading = function (angle) {\n    this.dir = angle;\n    return this;\n  };\n\n  Turtle.prototype.clearPaths = function () {\n    this.paths = [this.paths[this.paths.length - 1]];\n    return this;\n  };\n\n  Turtle.prototype.clear = function (x, y, width, height) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (width === void 0) {\n      width = this.width;\n    }\n\n    if (height === void 0) {\n      height = this.height;\n    }\n\n    this._ctx.translate(-(this._origin.x + 0.5) * this.width, -(this._origin.y + 0.5) * this.height);\n\n    this._ctx.clearRect(x, y, width, height);\n\n    this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);\n\n    return this;\n  };\n\n  Turtle.prototype.home = function () {\n    this.x = this.width / 2;\n    this.y = this.height / 2;\n    this.dir = 0;\n    return this;\n  };\n\n  Turtle.prototype.toradians = function (angle) {\n    return angle * (Math.PI * 2 / 360);\n  };\n\n  Turtle.prototype.circle = function (radius, extent, steps) {\n    if (extent === void 0) {\n      extent = 360;\n    }\n\n    if (!extent) {\n      extent = 360;\n    }\n\n    extent = this.toradians(extent);\n\n    if (!steps) {\n      steps = Math.round(Math.abs(radius * extent * 8)) | 0;\n      steps = Math.max(steps, 4);\n    }\n\n    var cx = this.x + radius * Math.cos(this.dir + Math.PI / 2);\n    var cy = this.y + radius * Math.sin(this.dir + Math.PI / 2);\n    var a1 = Math.atan2(this.y - cy, this.x - cx);\n    var a2 = radius >= 0 ? a1 + extent : a1 - extent;\n\n    for (var i = 0; i < steps; i++) {\n      var p = i / (steps - 1);\n      var a = a1 + (a2 - a1) * p;\n      var x = cx + Math.abs(radius) * Math.cos(a);\n      var y = cy + Math.abs(radius) * Math.sin(a);\n      this.goto(x, y);\n    }\n\n    if (radius >= 0) {\n      this.dir += extent;\n    } else {\n      this.dir -= extent;\n    }\n\n    return this;\n  };\n\n  Object.defineProperty(Turtle.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"dir\", {\n    get: function () {\n      return this._dir;\n    },\n    set: function (dir) {\n      this._dir = dir;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"lineWidth\", {\n    get: function () {\n      return this._lineWidth;\n    },\n    set: function (lineWidth) {\n      this._lineWidth = lineWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"draw\", {\n    get: function () {\n      return this._draw;\n    },\n    set: function (draw) {\n      this._draw = draw;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"x\", {\n    get: function () {\n      return this._x;\n    },\n    set: function (x) {\n      this._x = x;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Turtle.prototype, \"y\", {\n    get: function () {\n      return this._y;\n    },\n    set: function (y) {\n      this._y = y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Turtle;\n}();\n\nexport default Turtle;","map":{"version":3,"sources":["C:/Users/sever/Desktop/Mahte Programm/Maht App/TriangleCalculator/node_modules/react-turtle/dist/turtle-core.js"],"names":["Color","Turtle","canvas","_dir","_x","_y","_draw","_color","_lineWidth","_origin","x","y","paths","path","Path2D","color","lineWidth","states","goto","moveTo","moveto","setpos","setPosition","f","forward","fd","b","back","bk","backward","lt","left","rt","right","pd","pendown","down","pu","penup","up","jmp","jump","seth","setheading","_ctx","getContext","dir","_height","height","_width","width","translate","currentPath","prototype","setCurrentPath","push","Object","defineProperty","set","size","enumerable","configurable","get","point","length","current","draw","lineTo","drawing","dist","Math","cos","sin","PI","angle","pos","save","hex","restore","state","pop","undefined","setcolor","setx","sety","setlinewidth","fill","stroke","clear","_i","_a","strokeStyle","transformColor","callback","clearPaths","clearRect","home","toradians","circle","radius","extent","steps","round","abs","max","cx","cy","a1","atan2","a2","i","p","a"],"mappings":"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","sourcesContent":["import Color from 'color';\nvar Turtle = /** @class */ (function () {\n    function Turtle(canvas) {\n        this._dir = 0;\n        this._x = 0;\n        this._y = 0;\n        this._draw = true;\n        this._color = Color('#000');\n        this._lineWidth = 1;\n        this._origin = {\n            x: 0,\n            y: 0,\n        };\n        this.paths = [\n            {\n                path: new Path2D(),\n                color: this.color,\n                lineWidth: this.lineWidth,\n            },\n        ];\n        this.states = [];\n        this.goto = this.moveTo;\n        this.moveto = this.moveTo;\n        this.setpos = this.moveTo;\n        this.setPosition = this.moveTo;\n        this.f = this.forward;\n        this.fd = this.forward;\n        this.b = this.back;\n        this.bk = this.back;\n        this.backward = this.back;\n        this.lt = this.left;\n        this.rt = this.right;\n        this.pd = this.pendown;\n        this.down = this.pendown;\n        this.pu = this.penup;\n        this.up = this.penup;\n        this.jmp = this.jump;\n        this.seth = this.setheading;\n        this._ctx = canvas.getContext('2d');\n        this.x = 0;\n        this.y = 0;\n        this.dir = 0;\n        this._height = canvas.height;\n        this._width = canvas.width;\n        this._origin = {\n            x: 0,\n            y: 0,\n        };\n        this._ctx.translate(0.5 * this.width, 0.5 * this.height);\n        this.currentPath.moveTo(0, 0);\n    }\n    Turtle.prototype.setCurrentPath = function () {\n        this.paths.push({\n            path: new Path2D(),\n            color: this.color,\n            lineWidth: this.lineWidth,\n        });\n    };\n    Object.defineProperty(Turtle.prototype, \"size\", {\n        set: function (size) {\n            this._ctx.translate((this._origin.x - 0.5) * this.width, (this._origin.y - 0.5) * this.height);\n            this._width = size.width;\n            this._height = size.height;\n            this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"origin\", {\n        get: function () {\n            return this._origin;\n        },\n        set: function (point) {\n            this._ctx.translate((this._origin.x - 0.5) * this.width, (this._origin.y - 0.5) * this.height);\n            this._origin = point;\n            this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"current\", {\n        get: function () {\n            return this.paths[this.paths.length - 1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"currentPath\", {\n        get: function () {\n            return this.current.path;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Turtle.prototype.penup = function () {\n        this.draw = false;\n        return this;\n    };\n    Turtle.prototype.pendown = function () {\n        if (!this.draw) {\n            this.draw = true;\n            this.setCurrentPath();\n        }\n        return this;\n    };\n    Turtle.prototype.moveTo = function (x, y) {\n        this.x = x;\n        this.y = y;\n        if (!this.draw) {\n            this.currentPath.moveTo(this.x, this.y);\n        }\n        else {\n            this.currentPath.lineTo(this.x, this.y);\n        }\n        return this;\n    };\n    Turtle.prototype.jump = function (x, y) {\n        var drawing = this.draw;\n        this.penup();\n        this.x = x;\n        this.y = y;\n        if (drawing) {\n            this.pendown();\n        }\n    };\n    Turtle.prototype.forward = function (dist) {\n        // vector transformation\n        var x = this.x + dist * Math.cos(this.dir);\n        var y = this.y + dist * Math.sin(this.dir);\n        return this.moveTo(x, y);\n    };\n    Turtle.prototype.back = function (dist) {\n        var x = this.x + dist * Math.cos(this.dir - Math.PI);\n        var y = dist * Math.sin(this.dir - Math.PI);\n        return this.moveTo(x, y);\n    };\n    Turtle.prototype.left = function (angle) {\n        if (angle === void 0) { angle = 90; }\n        this.dir -= angle * (Math.PI / 180);\n        return this;\n    };\n    Turtle.prototype.right = function (angle) {\n        if (angle === void 0) { angle = 90; }\n        this.dir += angle * (Math.PI / 180);\n        return this;\n    };\n    Turtle.prototype.pos = function () {\n        return { y: this.x, x: this.y };\n    };\n    Turtle.prototype.save = function () {\n        this.states.push({\n            x: this.x,\n            y: this.y,\n            dir: this.dir,\n            color: this.color.hex(),\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    };\n    Turtle.prototype.restore = function () {\n        var state = this.states.pop();\n        if (state !== undefined) {\n            this.setcolor(state.color);\n            this.setx(state.x);\n            this.sety(state.x);\n            this.setheading(state.dir);\n            this.setlinewidth(state.lineWidth);\n        }\n        return this;\n    };\n    Turtle.prototype.fill = function () {\n        this._ctx.fill(this.currentPath);\n        return this;\n    };\n    Turtle.prototype.stroke = function () {\n        this.clear();\n        for (var _i = 0, _a = this.paths; _i < _a.length; _i++) {\n            var path = _a[_i];\n            this._ctx.strokeStyle = path.color.hex();\n            this._ctx.lineWidth = path.lineWidth;\n            this._ctx.stroke(path.path);\n        }\n        return this;\n    };\n    Turtle.prototype.setcolor = function (color) {\n        this._color = Color(color);\n        this.current.color = Color(color);\n        return this;\n    };\n    Turtle.prototype.setlinewidth = function (width) {\n        this.lineWidth = width;\n        this.current.lineWidth = width;\n        return this;\n    };\n    Turtle.prototype.setx = function (x) {\n        this.x = x;\n        return this;\n    };\n    Turtle.prototype.sety = function (y) {\n        this.y = y;\n        return this;\n    };\n    Object.defineProperty(Turtle.prototype, \"heading\", {\n        get: function () {\n            return this.dir;\n        },\n        set: function (angle) {\n            this.dir = angle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Turtle.prototype.transformColor = function (callback) {\n        this.setcolor(callback(this.color).hex());\n        return this;\n    };\n    Turtle.prototype.setheading = function (angle) {\n        this.dir = angle;\n        return this;\n    };\n    Turtle.prototype.clearPaths = function () {\n        this.paths = [this.paths[this.paths.length - 1]];\n        return this;\n    };\n    Turtle.prototype.clear = function (x, y, width, height) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (width === void 0) { width = this.width; }\n        if (height === void 0) { height = this.height; }\n        this._ctx.translate(-(this._origin.x + 0.5) * this.width, -(this._origin.y + 0.5) * this.height);\n        this._ctx.clearRect(x, y, width, height);\n        this._ctx.translate((this._origin.x + 0.5) * this.width, (this._origin.y + 0.5) * this.height);\n        return this;\n    };\n    Turtle.prototype.home = function () {\n        this.x = this.width / 2;\n        this.y = this.height / 2;\n        this.dir = 0;\n        return this;\n    };\n    Turtle.prototype.toradians = function (angle) {\n        return angle * ((Math.PI * 2) / 360);\n    };\n    Turtle.prototype.circle = function (radius, extent, steps) {\n        if (extent === void 0) { extent = 360; }\n        if (!extent) {\n            extent = 360;\n        }\n        extent = this.toradians(extent);\n        if (!steps) {\n            steps = Math.round(Math.abs(radius * extent * 8)) | 0;\n            steps = Math.max(steps, 4);\n        }\n        var cx = this.x + radius * Math.cos(this.dir + Math.PI / 2);\n        var cy = this.y + radius * Math.sin(this.dir + Math.PI / 2);\n        var a1 = Math.atan2(this.y - cy, this.x - cx);\n        var a2 = radius >= 0 ? a1 + extent : a1 - extent;\n        for (var i = 0; i < steps; i++) {\n            var p = i / (steps - 1);\n            var a = a1 + (a2 - a1) * p;\n            var x = cx + Math.abs(radius) * Math.cos(a);\n            var y = cy + Math.abs(radius) * Math.sin(a);\n            this.goto(x, y);\n        }\n        if (radius >= 0) {\n            this.dir += extent;\n        }\n        else {\n            this.dir -= extent;\n        }\n        return this;\n    };\n    Object.defineProperty(Turtle.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"dir\", {\n        get: function () {\n            return this._dir;\n        },\n        set: function (dir) {\n            this._dir = dir;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"lineWidth\", {\n        get: function () {\n            return this._lineWidth;\n        },\n        set: function (lineWidth) {\n            this._lineWidth = lineWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"draw\", {\n        get: function () {\n            return this._draw;\n        },\n        set: function (draw) {\n            this._draw = draw;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"x\", {\n        get: function () {\n            return this._x;\n        },\n        set: function (x) {\n            this._x = x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Turtle.prototype, \"y\", {\n        get: function () {\n            return this._y;\n        },\n        set: function (y) {\n            this._y = y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Turtle;\n}());\nexport default Turtle;\n"]},"metadata":{},"sourceType":"module"}