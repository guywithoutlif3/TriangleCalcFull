{"version":3,"sources":["reportWebVitals.js","components/Pythagoras.js","components/Winkel.js","components/Height.js","components/Area.js","components/List.js","components/Sin.js","components/Cos.js","components/Tan.js","logo.jpg","components/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Pythagoras","useState","calcType1","setCalcType1","sideA","setSideA","sideB","setSideB","sideC","setSideC","solution","setSolution","error1","setError1","JSON","parse","localStorage","getItem","items","setItems","useEffect","setItem","stringify","solutionInsertLocalStorage","calculateSolution","calcType","angleA","angleB","angleC","error","Container","Row","className","Col","xs","Form","Select","onChange","e","console","log","target","value","condition","InputGroup","FormControl","parseFloat","placeholder","Text","Button","onClick","result","Math","round","sqrt","pow","window","location","reload","variant","Alert","Winkel","setAngleA","setAngleB","setAngleC","toRadians","angle","PI","onFocus","class","asin","sin","Height","area","setArea","style","textAlign","height","setHeight","List","setInterval","getLocalStorage","storage","length","Card","ListGroup","margin","slice","reverse","map","Item","padding","fontSize","clear","Sin","input","setInput","Cos","cos","Tan","tan","App","setCalcType","display","marginLeft","marginRight","marginBottom","width","src","Logo","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a75d9178.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\nexport default function Pythagoras() {\r\n  const [calcType1, setCalcType1] = useState(0.0);\r\n  const [sideA, setSideA] = useState(0.0);\r\n  const [sideB, setSideB] = useState(0.0);\r\n  const [sideC, setSideC] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(\r\n    JSON.parse(localStorage.getItem(\"storage\"))\r\n  );\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n    setError1(\"\");\r\n  }, [solution]);\r\n  const areTheNumbersAlmostEqual = (num1, num2) => {\r\n    return Math.abs( num1 - num2 ) < Number.EPSILON;\r\n}\r\n  const calculateSolution = () => {\r\n    if (calcType1 === \"Hypotenuse / Seite γ\") {\r\n      setError1(\"\");\r\n    } else if (calcType1 === \"Seite α / Seite β\") {\r\n      if (sideC > sideB   ) {\r\n        setError1(\"\");\r\n      } else if(sideC <= sideB ){\r\n        setError1(\"Invalider input: stellen sie Sicher das γ > α/β\");\r\n      }\r\n    }\r\n  };\r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: calcType1,\r\n        sideA: sideA,\r\n        sideB: sideB,\r\n        sideC: sideC,\r\n        angleA: null,\r\n        angleB: null,\r\n        angleC: null,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <Form.Select\r\n              onChange={(e) => {\r\n                console.log(\"e.target.value\", e.target.value);\r\n                setCalcType1(e.target.value);\r\n              }}\r\n            >\r\n              <option value=\"0\">Welche Seite wollen Sie Berechnen</option>\r\n              <option value=\"Hypotenuse / Seite γ\">Hypotenuse / Seite γ</option>\r\n              <option value=\"Seite α / Seite β\">Seite α / Seite β</option>\r\n            </Form.Select>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      {/* Condition for rendering selected Calculation Method for which Side */}\r\n      <Switch>\r\n        {/*  Condtion for Calculate Side C*/}\r\n        <Case condition={calcType1 === \"Hypotenuse / Seite γ\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    onChange={(e) => {\r\n                      setSideA(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite α\"\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite α\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    onChange={(e) => setSideB(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite β\"\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.round(\r\n                          Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2)) *\r\n                            10000\r\n                        ) / 10000;\r\n                      setSideC(result);\r\n                      setSolution(result);\r\n                      calculateSolution();\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/*  Condtion for Calculate Side A / Side B */}\r\n        <Case condition={calcType1 === \"Seite α / Seite β\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    onChange={(e) => {\r\n                      setSideB(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite β\"\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    onChange={(e) => setSideC(parseFloat(e.target.value))}\r\n                    placeholder=\"Hypotenuse / Seite γ\"\r\n                  />\r\n                  <InputGroup.Text\r\n                    className=\"input\"\r\n                    placeholder=\"Hypotenuse / Seite γ\"\r\n                  >\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      \r\n                      let result =\r\n                        Math.round(\r\n                          Math.sqrt(Math.pow(sideC, 2) - Math.pow(sideB, 2)) *\r\n                            10000\r\n                        ) / 10000;\r\n                      setSideA(result);\r\n                      setSolution(result);\r\n                      calculateSolution();\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n\r\n                  \r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/* Condtion for Default value */}\r\n        <Default>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <Alert variant={\"primary\"}>\r\n                  Bitte wählen Sie eine Seite zum Ausrechnen!\r\n                </Alert>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Default>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\n\r\nexport default function Winkel() {\r\n  const [calcType1, setCalcType1] = useState(0.0);\r\n  const [sideA, setSideA] = useState(0.0);\r\n  const [sideB, setSideB] = useState(0.0);\r\n  const [sideC, setSideC] = useState(0.0);\r\n  const [angleA, setAngleA] = useState(0.0);\r\n  const [angleB, setAngleB] = useState(0.0);\r\n  const [angleC, setAngleC] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(\r\n    JSON.parse(localStorage.getItem(\"storage\"))\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n  }, [solution]);\r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: calcType1,\r\n        sideA: null,\r\n        sideB: null,\r\n        sideC: null,\r\n        angleA: angleA,\r\n        angleB: angleB,\r\n        angleC: angleC,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n  function toRadians(angle) {\r\n    return angle * (Math.PI / 180);\r\n  }\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <Form.Select\r\n              onChange={(e) => {\r\n                console.log(\"e.target.value\", e.target.value);\r\n                setCalcType1(e.target.value);\r\n              }}\r\n              onFocus={(e) => {\r\n                e.target.value = \"0\";\r\n              }}\r\n            >\r\n              <option value=\"0\">Welche Seite wollen Sie Berechnen</option>\r\n              <option value=\"Angle A from a, B, b\">Angle A from a, B, b</option>\r\n              <option value=\"Angle A from a, C, c\">Angle A from a, C, c</option>\r\n              <option value=\"Angle B from b, A, a\">Angle B from b, A, a</option>\r\n              <option value=\"Angle B from b, C, c\">Angle B from b, C, c</option>\r\n              <option value=\"Angle C from c, A, a\">Angle C from c, A, a</option>\r\n              <option value=\"Angle C from c, B, b\">Angle C from c, B, b</option>\r\n            </Form.Select>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      {/* Condition for rendering selected Calculation Method for which Side */}\r\n      <Switch>\r\n        {/*  Angle A from a, B, b*/}\r\n        <Case condition={calcType1 === \"Angle A from a, B, b\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      setSideA(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite α\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite α\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value >= 180) {\r\n                        setError1(\"Winkel ist 180 oder grösser\");\r\n                      } else {\r\n                        setError1(\"\");\r\n                        setAngleB(parseFloat(e.target.value));\r\n                      }\r\n                    }}\r\n                    placeholder=\"Winkel β\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    °\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => setSideB(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite β\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.asin(\r\n                          (toRadians(sideA) * Math.sin(toRadians(angleB))) /\r\n                            toRadians(sideB)\r\n                        ) *\r\n                        (180 / Math.PI);\r\n                      setAngleA(result);\r\n                      setAngleC(180 - result - angleB);\r\n                      setSolution(result);\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/*  Angle A from a, C, c*/}\r\n        <Case condition={calcType1 === \"Angle A from a, C, c\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      setSideA(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite α\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite α\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value >= 180) {\r\n                        setError1(\"Winkel ist 180 oder grösser\");\r\n                      } else {\r\n                        setError1(\"\");\r\n                        setAngleC(parseFloat(e.target.value));\r\n                      }\r\n                    }}\r\n                    placeholder=\"Winkel γ\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    °\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => setSideC(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite γ\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.asin(\r\n                          (toRadians(sideA) * Math.sin(toRadians(angleC))) /\r\n                            toRadians(sideC)\r\n                        ) *\r\n                        (180 / Math.PI);\r\n                      setAngleA(result);\r\n                      setAngleB(180 - result - angleC);\r\n                      setSolution(result);\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/*  Angle B from b, A, a */}\r\n        <Case condition={calcType1 === \"Angle B from b, A, a\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      setSideB(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite β\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value >= 180) {\r\n                        setError1(\"Winkel ist 180 oder grösser\");\r\n                      } else {\r\n                        setError1(\"\");\r\n                        setAngleA(parseFloat(e.target.value));\r\n                      }\r\n                    }}\r\n                    placeholder=\"Winkel α\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    °\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => setSideA(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite α\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.asin(\r\n                          (toRadians(sideB) * Math.sin(toRadians(angleA))) /\r\n                            toRadians(sideA)\r\n                        ) *\r\n                        (180 / Math.PI);\r\n                      setAngleB(result);\r\n                      setAngleC(180 - result - angleA);\r\n                      setSolution(result);\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/*  Angle B from b, C, c */}\r\n        <Case condition={calcType1 === \"Angle B from b, C, c\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      setSideB(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite β\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value >= 180) {\r\n                        setError1(\"Winkel ist 180 oder grösser\");\r\n                      } else {\r\n                        setError1(\"\");\r\n                        setAngleC(parseFloat(e.target.value));\r\n                      }\r\n                    }}\r\n                    placeholder=\"Winkel γ\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    °\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => setSideC(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite γ\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.asin(\r\n                          (toRadians(sideB) * Math.sin(toRadians(angleC))) /\r\n                            toRadians(sideC)\r\n                        ) *\r\n                        (180 / Math.PI);\r\n                      setAngleB(result);\r\n                      setAngleC(180 - result - angleC);\r\n                      setSolution(result);\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/*  Angle C from c, A, a */}\r\n        <Case condition={calcType1 === \"Angle C from c, A, a\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      setSideC(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite γ\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value >= 180) {\r\n                        setError1(\"Winkel ist 180 oder grösser\");\r\n                      } else {\r\n                        setError1(\"\");\r\n                        setAngleA(parseFloat(e.target.value));\r\n                      }\r\n                    }}\r\n                    placeholder=\"Winkel α\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    °\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => setSideA(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite α\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.asin(\r\n                          (toRadians(sideC) * Math.sin(toRadians(angleA))) /\r\n                            toRadians(sideA)\r\n                        ) *\r\n                        (180 / Math.PI);\r\n                      setAngleC(result);\r\n                      setAngleB(180 - result - angleA);\r\n                      setSolution(result);\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/*  Angle C from c, B, b */}\r\n        <Case condition={calcType1 === \"Angle C from c, B, b\"}>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      setSideC(parseFloat(e.target.value));\r\n                    }}\r\n                    placeholder=\"Seite γ\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value >= 180) {\r\n                        setError1(\"Winkel ist 180 oder grösser\");\r\n                      } else {\r\n                        setError1(\"\");\r\n                        setAngleB(parseFloat(e.target.value));\r\n                      }\r\n                    }}\r\n                    placeholder=\"Winkel β\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Winkel β\">\r\n                    °\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    class={\"input\"}\r\n                    onChange={(e) => setSideB(parseFloat(e.target.value))}\r\n                    placeholder=\"Seite β\"\r\n                    onFocus={(e) => {\r\n                      e.target.value = \"\";\r\n                    }}\r\n                  />\r\n                  <InputGroup.Text className=\"input\" placeholder=\"Seite β\">\r\n                    cm\r\n                  </InputGroup.Text>\r\n                </InputGroup>\r\n                <Row className=\"justify-content-md-center\">\r\n                  <Button\r\n                    onClick={() => {\r\n                      let result =\r\n                        Math.asin(\r\n                          (toRadians(sideC) * Math.sin(toRadians(angleB))) /\r\n                            toRadians(sideB)\r\n                        ) *\r\n                        (180 / Math.PI);\r\n                      setAngleC(result);\r\n                      setAngleA(180 - result - angleB);\r\n                      setSolution(result);\r\n                      window.location.reload(false);\r\n                    }}\r\n                    variant=\"primary\"\r\n                  >\r\n                    Berechnen!\r\n                  </Button>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Case>\r\n\r\n        {/* Condtion for Default value */}\r\n        <Default>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <Alert variant={\"primary\"}>\r\n                  Bitte wählen Sie eine Seite zum Ausrechnen!\r\n                </Alert>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Default>\r\n      </Switch>\r\n      <If condition={error1 != \"\"}>\r\n        <Then>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs={5}>\r\n                <Alert variant={\"danger\"}>{error1}</Alert>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Then>\r\n      </If>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\n\r\nexport default function Height() {\r\n  const [calcType1, setCalcType1] = useState(0.0);\r\n  const [area, setArea] = useState(0.0);\r\n  const [sideC, setSideC] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(JSON.parse(localStorage.getItem(\"storage\")));\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n  }, [solution]);\r\n  \r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: \"Höhe\",\r\n        sideA: null,\r\n        sideB: null,\r\n        sideC: null,\r\n        angleA: null,\r\n        angleB: null,\r\n        angleC: null,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => {\r\n                  setArea(parseFloat(e.target.value));\r\n                }}\r\n                placeholder=\"Fläche\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"Fläche\">\r\n                cm²\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => setSideC(parseFloat(e.target.value))}\r\n                placeholder=\"Seite γ\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"Seite γ\">\r\n                cm\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n              <Button\r\n                onClick={() => {\r\n                  setSolution((2 * area) / sideC);\r\n                }}\r\n                variant=\"primary\"\r\n              >\r\n                Berechnen!\r\n              </Button>\r\n              <h1\r\n                style={{ textAlign: \"center\" }}\r\n                className=\"justify-content-md-center\"\r\n              >\r\n                {solution}\r\n              </h1>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\n\r\nexport default function Height() {\r\n  const [calcType1, setCalcType1] = useState(0.0);\r\n  const [height, setHeight] = useState(0.0);\r\n  const [sideC, setSideC] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(JSON.parse(localStorage.getItem(\"storage\")));\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n  }, [solution]);\r\n\r\n\r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: \"Fläche\",\r\n        sideA: null,\r\n        sideB: null,\r\n        sideC: null,\r\n        angleA: null,\r\n        angleB: null,\r\n        angleC: null,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => {\r\n                  setHeight(parseFloat(e.target.value));\r\n                }}\r\n                placeholder=\"Höhe\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"Höhe\">\r\n                cm\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => setSideC(parseFloat(e.target.value))}\r\n                placeholder=\"Seite γ\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"Seite γ\">\r\n                cm\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n              <Button\r\n                onClick={() => {\r\n                  setSolution((height * sideC) / 2);\r\n                }}\r\n                variant=\"primary\"\r\n              >\r\n                Berechnen!\r\n              </Button>\r\n              <h1\r\n                style={{ textAlign: \"center\" }}\r\n                className=\"justify-content-md-center\"\r\n              >\r\n                {solution}\r\n              </h1>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  ListGroup,\r\n  InputGroup,\r\n  Button,\r\n  Alert\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\nimport Turtle from \"react-turtle\";\r\nexport default function List() {\r\n  const [newItem, setnewItem] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n  let counter = 0;\r\n  useEffect(() => {\r\n    setInterval(function () {\r\n      getLocalStorage();\r\n    }, 1000);\r\n  }, []);\r\n  const getLocalStorage = () => {\r\n    let storage = localStorage.getItem(\"storage\");\r\n    if (storage == null || storage.length === 0) {\r\n      localStorage.setItem(\"storage\", JSON.stringify([]));\r\n      storage = localStorage.getItem(\"storage\");\r\n    } else {\r\n      setItems(JSON.parse(storage));\r\n    }\r\n  };\r\n  const resetList = () => {\r\n    localStorage.clear();\r\n    window.location.reload(false);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <div>\r\n              <ListGroup style={{ margin: \"3%\" }}>\r\n                {items\r\n                  .slice(0)\r\n                  .reverse()\r\n                  .map((e) => {\r\n                    return (\r\n                      <If condition={e.solution !== 0}>\r\n                        <Then>\r\n                          <ListGroup.Item style={{ padding: \"10%\" }}>\r\n                            <p>\r\n                              <strong style={{ fontSize: \"150%\" }}>\r\n                                Lösung: : {e.solution}\r\n                              </strong>\r\n                            </p>\r\n                            <p>\r\n                              <strong>Was ?: </strong> {e.calcType}\r\n                            </p>\r\n                            <If condition={e.sideA !== null}>\r\n                              <Then>\r\n                                <p>\r\n                                  <strong>Seite A: </strong>\r\n                                  {e.sideA}\r\n                                </p>\r\n                                <p>\r\n                                  <strong>Seite B: </strong>\r\n                                  {e.sideB}\r\n                                </p>\r\n                                <p>\r\n                                  <strong>Seite C: </strong>\r\n                                  {e.sideC}\r\n                                </p>\r\n                              </Then>\r\n                            </If>\r\n                            <If condition={e.angleA !== null && e.error == \"\"}>\r\n                              <Then>\r\n                                <p>\r\n                                  <strong>Winkel A: </strong>\r\n                                  {e.angleA}\r\n                                </p>\r\n                                <p>\r\n                                  <strong>Winkel B: </strong>\r\n                                  {e.angleB}\r\n                                </p>\r\n                                <p>\r\n                                  <strong>Winkel C: </strong>\r\n                                  {e.angleC}\r\n                                </p>\r\n                              </Then>\r\n                            </If>\r\n                            <If condition={e.error !== \"\"}>\r\n                              <Then>\r\n                                <p>\r\n                                <Alert variant={\"danger\"}>{e.error}</Alert> \r\n                                </p>\r\n                              </Then>\r\n                            </If>\r\n                          </ListGroup.Item>\r\n                        </Then>\r\n                      </If>\r\n                    );\r\n                  })}\r\n              </ListGroup>\r\n              <Row className=\"justify-content-md-center\">\r\n                <Button\r\n                  onClick={() => {\r\n                    resetList();\r\n                  }}\r\n                  variant=\"primary\"\r\n                >\r\n                  Reset List!\r\n                </Button>\r\n              </Row>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Card>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\n\r\nexport default function Sin() {\r\n  const [input, setInput] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(JSON.parse(localStorage.getItem(\"storage\")));\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n  }, [solution]);\r\n\r\n\r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: \"Sin\",\r\n        sideA: null,\r\n        sideB: null,\r\n        sideC: null,\r\n        angleA: null,\r\n        angleB: null,\r\n        angleC: null,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => setInput(parseFloat(e.target.value))}\r\n                placeholder=\"\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"\">\r\n                x\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n              <Button\r\n                onClick={() => {\r\n                  setSolution(Math.sin(input * Math.PI / 180));\r\n                }}\r\n                variant=\"primary\"\r\n              >\r\n                Berechnen!\r\n              </Button>\r\n              <h1\r\n                style={{ textAlign: \"center\" }}\r\n                className=\"justify-content-md-center\"\r\n              >\r\n                {solution}\r\n              </h1>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\n\r\nexport default function Cos() {\r\n  const [input, setInput] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(JSON.parse(localStorage.getItem(\"storage\")));\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n  }, [solution]);\r\n\r\n\r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: \"Cos\",\r\n        sideA: null,\r\n        sideB: null,\r\n        sideC: null,\r\n        angleA: null,\r\n        angleB: null,\r\n        angleC: null,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => setInput(parseFloat(e.target.value))}\r\n                placeholder=\"\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"\">\r\n                x\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n              <Button\r\n                onClick={() => {\r\n                  setSolution(Math.cos(input * Math.PI / 180));\r\n                }}\r\n                variant=\"primary\"\r\n              >\r\n                Berechnen!\r\n              </Button>\r\n              <h1\r\n                style={{ textAlign: \"center\" }}\r\n                className=\"justify-content-md-center\"\r\n              >\r\n                {solution}\r\n              </h1>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Form,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  InputGroup,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\n\r\nexport default function Tan() {\r\n  const [input, setInput] = useState(0.0);\r\n  const [solution, setSolution] = useState(0.0);\r\n  const [error1, setError1] = useState(\"\");\r\n  const [items, setItems] = useState(JSON.parse(localStorage.getItem(\"storage\")));\r\n  useEffect(() => {\r\n    localStorage.setItem(\"storage\", JSON.stringify(items));\r\n  }, [items]);\r\n  useEffect(() => {\r\n    solutionInsertLocalStorage();\r\n  }, [solution]);\r\n\r\n\r\n  const solutionInsertLocalStorage = () => {\r\n    setItems([\r\n      ...items,\r\n      {\r\n        solution: solution,\r\n        calcType: \"Tan\",\r\n        sideA: null,\r\n        sideB: null,\r\n        sideC: null,\r\n        angleA: null,\r\n        angleB: null,\r\n        angleC: null,\r\n        error: error1\r\n      },\r\n    ]);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={5}>\r\n            <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                onChange={(e) => setInput(parseFloat(e.target.value))}\r\n                placeholder=\"\"\r\n              />\r\n              <InputGroup.Text className=\"input\" placeholder=\"\">\r\n                x\r\n              </InputGroup.Text>\r\n            </InputGroup>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n              <Button\r\n                onClick={() => {\r\n                  setSolution(Math.tan(input * Math.PI / 180));\r\n                }}\r\n                variant=\"primary\"\r\n              >\r\n                Berechnen!\r\n              </Button>\r\n              <h1\r\n                style={{ textAlign: \"center\" }}\r\n                className=\"justify-content-md-center\"\r\n              >\r\n                {solution}\r\n              </h1>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.7822d11f.jpg\";","import { useState, useEffect } from \"react\";\r\nimport { Form, Container, Row, Col, Alert } from \"react-bootstrap\";\r\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from \"react-if\";\r\nimport Pythagoras from \"./Pythagoras.js\";\r\nimport Winkel from \"./Winkel.js\";\r\nimport Height from \"./Height.js\";\r\nimport Area from \"./Area.js\"\r\nimport List from \"./List.js\"\r\nimport Sin from \"./Sin.js\"\r\nimport Cos from \"./Cos.js\"\r\nimport Tan from \"./Tan.js\"\r\n\r\nimport Logo from \"../logo.jpg\";\r\nfunction App() {\r\n  const [calcType, setCalcType] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <header className=\"App-header\">\r\n        <img\r\n          style={{\r\n            display: \"block\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginBottom: \"1%\",\r\n          }}\r\n          width={\"15%\"}\r\n          src={Logo}\r\n          alt=\"BigCo Inc. logo\"\r\n        />\r\n      </header>\r\n      <body>\r\n        <Container>\r\n          <Row className=\"justify-content-md-center\">\r\n            <Col xs={5}>\r\n              <Form.Select\r\n                onChange={(e) => {\r\n                  console.log(\"e.target.value\", e.target.value);\r\n                  setCalcType(e.target.value);\r\n                }}\r\n              >\r\n                <option value=\"0\">Was wollen Sie Berechnen</option>\r\n                <option value=\"pythagoras\">pythagoras</option>\r\n                <option value=\"Winkel\">Winkel</option>\r\n                <option value=\"Höhe\">Höhe</option>\r\n                <option value=\"Fläche\">Fläche</option>\r\n                <option value=\"Sin\">Sin</option>\r\n                <option value=\"Cos\">Cos</option>\r\n                <option value=\"Tan\">Tan</option>\r\n              </Form.Select>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        {/* Condition for rendering selected Calculation Method */}\r\n        <Switch>\r\n          <Case condition={calcType === \"pythagoras\"}>\r\n            <Pythagoras />\r\n          </Case>\r\n          <Case condition={calcType === \"Winkel\"}>\r\n            <Winkel />\r\n          </Case>\r\n          <Case condition={calcType === \"Höhe\"}>\r\n            <Height />\r\n          </Case>\r\n          <Case condition={calcType === \"Fläche\"}>\r\n            <Area />\r\n          </Case>\r\n          <Case condition={calcType === \"Sin\"}>\r\n            <Sin />\r\n          </Case>\r\n          <Case condition={calcType === \"Cos\"}>\r\n            <Cos />\r\n          </Case>\r\n          <Case condition={calcType === \"Tan\"}>\r\n            <Tan />\r\n          </Case>\r\n\r\n          <Default>\r\n            <Container>\r\n              <Row className=\"justify-content-md-center\">\r\n                <Col xs={5}>\r\n                  <Alert variant={\"primary\"}>\r\n                    Bitte wählen Sie eine Option!\r\n                  </Alert>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Default>\r\n        </Switch>\r\n\r\n\r\n        <List/>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './components/App.js'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App></App>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}